plugins {
    id 'java'
    id 'application'
    id 'io.qameta.allure' version '2.8.1'
}

def allureVersion = "2.17.3"

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation 'org.testng:testng:7.1.0'
    testCompile 'io.rest-assured:rest-assured:3.0.6'
    testCompile 'io.rest-assured:json-schema-validator:3.0.6'
    implementation 'org.json:json:20171018'
    testCompile 'io.rest-assured:rest-assured:3.0.6'
    implementation group: 'com.github.javafaker', name: 'javafaker', version: '1.0.2'
    testCompile fileTree('lib')
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'io.qameta.allure', name: 'allure-rest-assured', version: '2.17.3'}
jar {
    manifest {
        attributes "Main-Class": "common.Main"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}
application{
    mainClassName = 'common.Main'
}

allure {
    aspectjweaver = true
    autoconfigure = false
    version = allureVersion
    resultsDir = file(projectDir.toString()+"allure-results/results/")
    reportDir = file(projectDir.toString()+"allure-results/report/")
    useTestNG {
        version = allureVersion
    }
}

test {
    useTestNG() {
        suites("/src/test/resources/test.xml")
    }
}

task runTests(type: JavaExec, dependsOn: 'classes') {
    main = 'org.testng.TestNG'
    classpath = files("./src/test/resources",
            project.sourceSets.main.compileClasspath,
            project.sourceSets.test.compileClasspath,
            project.sourceSets.main.runtimeClasspath,
            project.sourceSets.test.runtimeClasspath)
    args = ["-parallel",  "methods", "-threadcount", "1", "-d", "./build/test-output", "./src/test/resources/test.xml"]
}